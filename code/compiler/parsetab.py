
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "moduleleft=#leftORleft&left<LESSEQUAL>MOREEQUALleft+-left*/DIVMODleftUPLUSUMINUSABS ARRAY ASH ASSIGN BEGIN BOOLEAN BOOLEANCONSTANT BY CAP CASE CHAR CHARACTERCONSTANT CHR COMMENT CONST DEC DEFINITION DIV DO DOTDOT ELSE ELSIF END EXIT FOR HALT ID IF IMPORT IN INC INTEGER INTEGERCONSTANT LESSEQUAL LOOP MAX MIN MOD MODULE MOREEQUAL NIL OF OR ORD POINTER PROCEDURE READINT READREAL REAL REALCONSTANT RECORD REPEAT RETURN SIZE STRINGCONSTANT THEN TO TYPE UNTIL VAR WHILE WITHmodule : MODULE ID ';' importList declarationList statementBlock END ID '.' module : MODULE ID ';' importList declarationList statementBlock END ID importList   : IMPORT importedModulesList ';'\n                    |     importedModulesList : importedModules ',' importedModulesList\n                        | importedModulesimportedModules    :      ID ASSIGN ID \n    | ID declarationList      :       identifierDeclarationList procedureDeclarationList    identifierDeclarationList      :      CONST constantDeclarationList identifierDeclarationList \n    | VAR   variableDeclarationList   identifierDeclarationList\n    |    constantDeclarationList :      ID '=' expression ';' constantDeclarationList\n    |    variableDeclarationList  :       identifierList ':' type ';' clearVariables variableDeclarationList\n    | clearVariables : identifierList    :       ID \n    | ID ',' identifierList    procedureDeclarationList     :      procedureDeclaration ';' procedureDeclarationList\n    | forwardDeclaration ';' procedureDeclarationList\n    |procedureDeclaration     :       PROCEDURE receiver ID createTable optionalFormalParameters ';' declarationList insertEntry statementBlock END ID popTableinsertEntry : popTable : createTable : receiver     :       '(' optionalVAR ID  ':' ID  ')'\n    |    optionalVAR       :      VAR\n    |    optionalFormalParameters :       '(' optionalFormalParameterList ')' ':' qualident\n    | '(' optionalFormalParameterList ')' \n    |optionalFormalParameterList    :      formalParameterList\n    |    formalParameterList       :      formalParameter ';' formalParameterList\n    | formalParameter   formalParameter  :      optionalVAR identifierList ':' type forwardDeclaration  :       PROCEDURE '^' receiver ID createTable optionalFormalParameters popTable2popTable2 : statementBlock  : BEGIN beginquad statementList boolMarker\n                    |     beginquad :statementList :       statementList boolMarker statement ';' \n    | statement ';'\n    |    statement : IF expression THEN boolMarker statementList nMarker boolMarker elsifList optionalElse ENDelsifList    :      ELSIF expression THEN boolMarker statementList nMarker boolMarker elsifList\n    |    optionalElse      :      ELSE statementList\n    |    statement    : CASE expression OF caseList optionalElse ENDcaseList     : case '|' caseList    caseList     :      case    case         :       expression ':' statementList    case         :    statement    : WHILE boolMarker expression DO boolMarker statementList ENDstatement    : REPEAT boolMarker statementList UNTIL boolMarker expressionstatement    : FOR ID  ASSIGN expression forAssign TO expression toValue optionalBY DO boolMarker statementList boolMarker ENDforAssign    : toValue    : optionalBY        :      BY expression\n    |    statement    : LOOP boolMarker statementList ENDstatement    :  EXITstatement    :  READINT '(' designator ')' statement    :  READREAL '(' designator ')' statement    :   RETURN statement    :  RETURN expressionstatement    :   designator  statement :       designator checkConstant ASSIGN expressioncheckConstant : statement :    DEC '(' designator checkConstant ')'\n                |    DEC '(' designator checkConstant ',' expression ')' statement :    INC '(' designator checkConstant ')'\n                |    INC '(' designator checkConstant ',' expression ')'  builtIn    :    ABS '(' expression ')'  builtIn    :    SIZE '(' INTEGER ')'\n                    |    SIZE '(' REAL ')'\n                    |    SIZE '(' BOOLEAN ')'\n                    |    SIZE '(' CHAR ')'  builtIn    :    MIN '(' INTEGER ')'\n                    |    MIN '(' REAL ')'\n                    |    MIN '(' BOOLEAN ')'\n                    |    MIN '(' CHAR ')'  builtIn    :    MAX '(' INTEGER ')'\n                    |    MAX '(' REAL ')'\n                    |    MAX '(' BOOLEAN ')'\n                    |    MAX '(' CHAR ')'  builtIn    :    CHR '(' expression ')'  builtIn    :    ORD '(' expression ')'  builtIn    :    CAP '(' expression ')' designator   :       ID  suffix\n                    |    builtIn    suffix :      '.' ID   suffix\n    | '[' optionalExpressionList ']'  suffix\n    | '^'  suffix\n    | '(' optionalExpressionList ')' suffix  \n    |    optionalExpressionList     :       expressionList \n    |    qualident    :       ID \n    | ID  '.' ID \n    | INTEGER\n    | CHAR\n    | REAL  \n    | BOOLEAN type         :       qualident  type         : ARRAY expression OF typetype : POINTER TO ARRAY expression OF typeexpressionList :      expression ',' expressionList\n    | expression    expression :  '-' expression %prec UMINUS\n                    | '+' expression %prec UPLUSexpression         : factorboolMarker : nMarker : expression    :   expression OR boolMarker expression\n    | expression '&' boolMarker expression\n    expression :  expression '#' expression\n    | expression '=' expression\n    | expression '<' expression\n    | expression LESSEQUAL expression\n    | expression '>' expression\n    | expression MOREEQUAL expression\n    expression         :       expression '+' expression\n    | expression '-' expression\n    | expression '*' expression\n    | expression '/' expression\n    | expression DIV expression\n    | expression MOD expression\n    \n    factor       :     NIL factor : designatorfactor : INTEGERCONSTANTfactor : CHARACTERCONSTANTfactor : REALCONSTANTfactor : STRINGCONSTANTfactor : BOOLEANCONSTANTfactor : '~' factor factor : '(' expression ')' "
    
_lr_action_items = {'REAL':([36,101,111,118,189,275,286,288,],[73,152,165,175,73,73,73,73,]),'MOREEQUAL':([51,58,83,84,85,89,90,91,92,93,95,97,102,105,109,117,128,130,131,132,133,149,150,161,162,164,173,179,180,191,192,193,195,196,197,198,199,200,202,203,205,206,207,210,211,212,213,216,219,221,222,223,224,225,226,229,231,232,234,235,236,237,238,239,249,252,253,261,263,281,282,285,293,306,308,],[-99,-94,-137,-134,-138,-115,-136,-135,-133,-132,134,134,134,-93,-99,134,134,134,-114,-113,-139,134,134,134,-99,-97,134,134,134,-140,-125,134,-122,134,-126,-128,-127,-129,-131,-123,-130,-124,-92,-87,-89,-88,-86,134,-99,-95,-99,-79,-81,-80,-78,134,134,-77,-83,-85,-84,-82,-90,-91,134,134,134,-98,-96,134,134,134,134,134,134,]),'CONST':([4,5,9,10,20,23,25,127,146,188,204,247,250,],[-4,10,-16,-14,10,10,-3,-17,-14,-16,-13,10,-15,]),'STRINGCONSTANT':([39,43,45,48,60,80,86,87,88,94,98,99,106,108,116,119,120,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,170,172,187,194,201,220,228,257,260,264,268,283,301,303,],[83,83,-116,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,-116,83,83,83,83,83,83,-116,83,83,83,83,83,83,83,83,83,83,83,-116,83,83,83,83,83,83,83,]),'MIN':([15,29,39,43,45,48,50,54,60,65,80,86,87,88,94,98,99,100,103,104,106,108,110,112,114,116,119,120,121,122,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,169,170,172,174,181,187,194,201,208,218,220,227,228,233,254,255,257,258,260,264,266,268,276,277,280,283,301,303,309,311,313,314,315,316,317,],[-43,61,61,61,-116,61,-116,-116,61,-116,61,61,61,61,61,61,61,61,61,61,61,61,-45,61,61,61,61,61,61,61,61,61,-116,61,61,61,61,61,61,-116,61,61,61,61,61,-116,61,61,-116,-116,61,61,61,-116,-44,61,61,-116,61,61,61,61,61,61,61,-116,61,-116,-116,-116,61,61,61,-116,-116,61,61,-116,-116,61,]),'|':([110,156,215,218,257,258,280,],[-45,-56,257,-44,-56,-46,-55,]),'CAP':([15,29,39,43,45,48,50,54,60,65,80,86,87,88,94,98,99,100,103,104,106,108,110,112,114,116,119,120,121,122,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,169,170,172,174,181,187,194,201,208,218,220,227,228,233,254,255,257,258,260,264,266,268,276,277,280,283,301,303,309,311,313,314,315,316,317,],[-43,44,44,44,-116,44,-116,-116,44,-116,44,44,44,44,44,44,44,44,44,44,44,44,-45,44,44,44,44,44,44,44,44,44,-116,44,44,44,44,44,44,-116,44,44,44,44,44,-116,44,44,-116,-116,44,44,44,-116,-44,44,44,-116,44,44,44,44,44,44,44,-116,44,-116,-116,-116,44,44,44,-116,-116,44,44,-116,-116,44,]),'THEN':([51,58,83,84,85,89,90,91,92,93,105,109,117,131,132,133,162,164,191,192,193,195,196,197,198,199,200,202,203,205,206,207,210,211,212,213,219,221,222,223,224,225,226,232,234,235,236,237,238,239,252,253,261,263,306,],[-99,-94,-137,-134,-138,-115,-136,-135,-133,-132,-93,-99,174,-114,-113,-139,-99,-97,-140,-125,-120,-122,-121,-126,-128,-127,-129,-131,-123,-130,-124,-92,-87,-89,-88,-86,-99,-95,-99,-79,-81,-80,-78,-77,-83,-85,-84,-82,-90,-91,-119,-118,-98,-96,311,]),'MOD':([51,58,83,84,85,89,90,91,92,93,95,97,102,105,109,117,128,130,131,132,133,149,150,161,162,164,173,179,180,191,192,193,195,196,197,198,199,200,202,203,205,206,207,210,211,212,213,216,219,221,222,223,224,225,226,229,231,232,234,235,236,237,238,239,249,252,253,261,263,281,282,285,293,306,308,],[-99,-94,-137,-134,-138,-115,-136,-135,-133,-132,144,144,144,-93,-99,144,144,144,-114,-113,-139,144,144,144,-99,-97,144,144,144,-140,144,144,144,144,144,-128,144,-129,-131,144,-130,144,-92,-87,-89,-88,-86,144,-99,-95,-99,-79,-81,-80,-78,144,144,-77,-83,-85,-84,-82,-90,-91,144,144,144,-98,-96,144,144,144,144,144,144,]),'CHAR':([36,101,111,118,189,275,286,288,],[76,153,166,176,76,76,76,76,]),'INTEGERCONSTANT':([39,43,45,48,60,80,86,87,88,94,98,99,106,108,116,119,120,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,170,172,187,194,201,220,228,257,260,264,268,283,301,303,],[84,84,-116,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,-116,84,84,84,84,84,84,-116,84,84,84,84,84,84,84,84,84,84,84,-116,84,84,84,84,84,84,84,]),'WHILE':([15,29,50,54,65,104,110,112,121,169,174,181,208,218,227,233,254,255,258,266,276,277,280,309,311,313,314,315,316,317,],[-43,45,-116,-116,-116,45,-45,45,45,-116,-116,-116,-116,-44,45,45,45,45,45,-116,-116,-116,-116,-116,-116,45,45,-116,-116,45,]),'TO':([51,58,75,83,84,85,89,90,91,92,93,105,109,131,132,133,162,164,191,192,193,195,196,197,198,199,200,202,203,205,206,207,210,211,212,213,219,221,222,223,224,225,226,229,232,234,235,236,237,238,239,252,253,261,263,265,],[-99,-94,126,-137,-134,-138,-115,-136,-135,-133,-132,-93,-99,-114,-113,-139,-99,-97,-140,-125,-120,-122,-121,-126,-128,-127,-129,-131,-123,-130,-124,-92,-87,-89,-88,-86,-99,-95,-99,-79,-81,-80,-78,-60,-77,-83,-85,-84,-82,-90,-91,-119,-118,-98,-96,283,]),'BOOLEANCONSTANT':([39,43,45,48,60,80,86,87,88,94,98,99,106,108,116,119,120,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,170,172,187,194,201,220,228,257,260,264,268,283,301,303,],[85,85,-116,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,-116,85,85,85,85,85,85,-116,85,85,85,85,85,85,85,85,85,85,85,-116,85,85,85,85,85,85,85,]),'READREAL':([15,29,50,54,65,104,110,112,121,169,174,181,208,218,227,233,254,255,258,266,276,277,280,309,311,313,314,315,316,317,],[-43,46,-116,-116,-116,46,-45,46,46,-116,-116,-116,-116,-44,46,46,46,46,46,-116,-116,-116,-116,-116,-116,46,46,-116,-116,46,]),'RETURN':([15,29,50,54,65,104,110,112,121,169,174,181,208,218,227,233,254,255,258,266,276,277,280,309,311,313,314,315,316,317,],[-43,43,-116,-116,-116,43,-45,43,43,-116,-116,-116,-116,-44,43,43,43,43,43,-116,-116,-116,-116,-116,-116,43,43,-116,-116,43,]),'DIV':([51,58,83,84,85,89,90,91,92,93,95,97,102,105,109,117,128,130,131,132,133,149,150,161,162,164,173,179,180,191,192,193,195,196,197,198,199,200,202,203,205,206,207,210,211,212,213,216,219,221,222,223,224,225,226,229,231,232,234,235,236,237,238,239,249,252,253,261,263,281,282,285,293,306,308,],[-99,-94,-137,-134,-138,-115,-136,-135,-133,-132,147,147,147,-93,-99,147,147,147,-114,-113,-139,147,147,147,-99,-97,147,147,147,-140,147,147,147,147,147,-128,147,-129,-131,147,-130,147,-92,-87,-89,-88,-86,147,-99,-95,-99,-79,-81,-80,-78,147,147,-77,-83,-85,-84,-82,-90,-91,147,147,147,-98,-96,147,147,147,147,147,147,]),'DEC':([15,29,50,54,65,104,110,112,121,169,174,181,208,218,227,233,254,255,258,266,276,277,280,309,311,313,314,315,316,317,],[-43,49,-116,-116,-116,49,-45,49,49,-116,-116,-116,-116,-44,49,49,49,49,49,-116,-116,-116,-116,-116,-116,49,49,-116,-116,49,]),'BY':([51,58,83,84,85,89,90,91,92,93,105,109,131,132,133,162,164,191,192,193,195,196,197,198,199,200,202,203,205,206,207,210,211,212,213,219,221,222,223,224,225,226,232,234,235,236,237,238,239,252,253,261,263,293,299,],[-99,-94,-137,-134,-138,-115,-136,-135,-133,-132,-93,-99,-114,-113,-139,-99,-97,-140,-125,-120,-122,-121,-126,-128,-127,-129,-131,-123,-130,-124,-92,-87,-89,-88,-86,-99,-95,-99,-79,-81,-80,-78,-77,-83,-85,-84,-82,-90,-91,-119,-118,-98,-96,-61,303,]),'CASE':([15,29,50,54,65,104,110,112,121,169,174,181,208,218,227,233,254,255,258,266,276,277,280,309,311,313,314,315,316,317,],[-43,48,-116,-116,-116,48,-45,48,48,-116,-116,-116,-116,-44,48,48,48,48,48,-116,-116,-116,-116,-116,-116,48,48,-116,-116,48,]),'BEGIN':([4,5,7,8,9,10,17,20,23,25,30,31,35,38,67,68,127,146,188,204,247,250,273,289,],[-4,-12,15,-22,-16,-14,-9,-12,-12,-3,-22,-22,-11,-10,-21,-20,-17,-14,-16,-13,-12,-15,-24,15,]),'&':([51,58,83,84,85,89,90,91,92,93,95,97,102,105,109,117,128,130,131,132,133,149,150,161,162,164,173,179,180,191,192,193,195,196,197,198,199,200,202,203,205,206,207,210,211,212,213,216,219,221,222,223,224,225,226,229,231,232,234,235,236,237,238,239,249,252,253,261,263,281,282,285,293,306,308,],[-99,-94,-137,-134,-138,-115,-136,-135,-133,-132,136,136,136,-93,-99,136,136,136,-114,-113,-139,136,136,136,-99,-97,136,136,136,-140,-125,136,-122,136,-126,-128,-127,-129,-131,-123,-130,-124,-92,-87,-89,-88,-86,136,-99,-95,-99,-79,-81,-80,-78,136,136,-77,-83,-85,-84,-82,-90,-91,136,-119,136,-98,-96,136,136,136,136,136,136,]),')':([51,58,73,74,76,77,78,81,83,84,85,89,90,91,92,93,105,106,109,130,131,132,133,149,151,152,153,154,155,157,159,160,161,162,164,165,166,167,168,171,173,175,176,177,178,179,180,182,184,190,191,192,193,195,196,197,198,199,200,202,203,205,206,207,210,211,212,213,217,219,221,222,223,224,225,226,232,234,235,236,237,238,239,241,242,244,245,246,251,252,253,261,262,263,281,285,287,290,296,],[-99,-94,-106,-108,-105,-107,-104,-102,-137,-134,-138,-115,-136,-135,-133,-132,-93,-101,-99,191,-114,-113,-139,207,209,210,211,212,213,-72,219,-100,-112,-99,-97,223,224,225,226,230,232,234,235,236,237,238,239,-72,-35,-103,-140,-125,-120,-122,-121,-126,-128,-127,-129,-131,-123,-130,-124,-92,-87,-89,-88,-86,259,-99,-95,-99,-79,-81,-80,-78,-77,-83,-85,-84,-82,-90,-91,267,269,-37,-34,272,-109,-119,-118,-98,-111,-96,292,295,-36,-110,-38,]),'(':([19,34,39,43,44,45,46,47,48,49,51,53,56,59,60,61,62,64,66,71,80,86,87,88,94,98,99,106,108,109,116,119,120,124,125,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,162,170,172,186,187,194,201,219,220,222,228,257,260,264,268,283,301,303,],[32,32,86,86,98,-116,100,101,86,103,106,111,114,116,86,118,119,120,122,-26,86,86,86,86,86,86,86,86,86,106,86,86,86,184,-26,86,86,-116,86,86,86,86,86,86,-116,86,86,86,86,86,106,86,86,184,86,86,86,106,86,106,-116,86,86,86,86,86,86,86,]),'+':([39,43,45,48,51,58,60,80,83,84,85,86,87,88,89,90,91,92,93,95,97,98,99,102,105,106,108,109,116,117,119,120,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,149,150,156,161,162,164,170,172,173,179,180,187,191,192,193,194,195,196,197,198,199,200,201,202,203,205,206,207,210,211,212,213,216,219,220,221,222,223,224,225,226,228,229,231,232,234,235,236,237,238,239,249,252,253,257,260,261,263,264,268,281,282,283,285,293,301,303,306,308,],[87,87,-116,87,-99,-94,87,87,-137,-134,-138,87,87,87,-115,-136,-135,-133,-132,139,139,87,87,139,-93,87,87,-99,87,139,87,87,139,139,-114,-113,-139,87,87,-116,87,87,87,87,87,87,-116,87,87,87,87,139,139,87,139,-99,-97,87,87,139,139,139,87,-140,139,139,87,139,139,-126,-128,-127,-129,87,-131,139,-130,139,-92,-87,-89,-88,-86,139,-99,87,-95,-99,-79,-81,-80,-78,-116,139,139,-77,-83,-85,-84,-82,-90,-91,139,139,139,87,87,-98,-96,87,87,139,139,87,139,139,87,87,139,139,]),'*':([51,58,83,84,85,89,90,91,92,93,95,97,102,105,109,117,128,130,131,132,133,149,150,161,162,164,173,179,180,191,192,193,195,196,197,198,199,200,202,203,205,206,207,210,211,212,213,216,219,221,222,223,224,225,226,229,231,232,234,235,236,237,238,239,249,252,253,261,263,281,282,285,293,306,308,],[-99,-94,-137,-134,-138,-115,-136,-135,-133,-132,140,140,140,-93,-99,140,140,140,-114,-113,-139,140,140,140,-99,-97,140,140,140,-140,140,140,140,140,140,-128,140,-129,-131,140,-130,140,-92,-87,-89,-88,-86,140,-99,-95,-99,-79,-81,-80,-78,140,140,-77,-83,-85,-84,-82,-90,-91,140,140,140,-98,-96,140,140,140,140,140,140,]),'-':([39,43,45,48,51,58,60,80,83,84,85,86,87,88,89,90,91,92,93,95,97,98,99,102,105,106,108,109,116,117,119,120,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,149,150,156,161,162,164,170,172,173,179,180,187,191,192,193,194,195,196,197,198,199,200,201,202,203,205,206,207,210,211,212,213,216,219,220,221,222,223,224,225,226,228,229,231,232,234,235,236,237,238,239,249,252,253,257,260,261,263,264,268,281,282,283,285,293,301,303,306,308,],[88,88,-116,88,-99,-94,88,88,-137,-134,-138,88,88,88,-115,-136,-135,-133,-132,141,141,88,88,141,-93,88,88,-99,88,141,88,88,141,141,-114,-113,-139,88,88,-116,88,88,88,88,88,88,-116,88,88,88,88,141,141,88,141,-99,-97,88,88,141,141,141,88,-140,141,141,88,141,141,-126,-128,-127,-129,88,-131,141,-130,141,-92,-87,-89,-88,-86,141,-99,88,-95,-99,-79,-81,-80,-78,-116,141,141,-77,-83,-85,-84,-82,-90,-91,141,141,141,88,88,-98,-96,88,88,141,141,88,141,141,88,88,141,141,]),',':([12,13,22,41,51,58,83,84,85,89,90,91,92,93,105,109,131,132,133,157,161,162,164,182,191,192,193,195,196,197,198,199,200,202,203,205,206,207,210,211,212,213,217,219,221,222,223,224,225,226,232,234,235,236,237,238,239,241,252,253,261,263,],[26,-8,37,-7,-99,-94,-137,-134,-138,-115,-136,-135,-133,-132,-93,-99,-114,-113,-139,-72,220,-99,-97,-72,-140,-125,-120,-122,-121,-126,-128,-127,-129,-131,-123,-130,-124,-92,-87,-89,-88,-86,260,-99,-95,-99,-79,-81,-80,-78,-77,-83,-85,-84,-82,-90,-91,268,-119,-118,-98,-96,]),'/':([51,58,83,84,85,89,90,91,92,93,95,97,102,105,109,117,128,130,131,132,133,149,150,161,162,164,173,179,180,191,192,193,195,196,197,198,199,200,202,203,205,206,207,210,211,212,213,216,219,221,222,223,224,225,226,229,231,232,234,235,236,237,238,239,249,252,253,261,263,281,282,285,293,306,308,],[-99,-94,-137,-134,-138,-115,-136,-135,-133,-132,142,142,142,-93,-99,142,142,142,-114,-113,-139,142,142,142,-99,-97,142,142,142,-140,142,142,142,142,142,-128,142,-129,-131,142,-130,142,-92,-87,-89,-88,-86,142,-99,-95,-99,-79,-81,-80,-78,142,142,-77,-83,-85,-84,-82,-90,-91,142,142,142,-98,-96,142,142,142,142,142,142,]),'.':([42,51,81,109,162,219,222,],[96,107,129,107,107,107,107,]),'CHARACTERCONSTANT':([39,43,45,48,60,80,86,87,88,94,98,99,106,108,116,119,120,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,170,172,187,194,201,220,228,257,260,264,268,283,301,303,],[91,91,-116,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,-116,91,91,91,91,91,91,-116,91,91,91,91,91,91,91,91,91,91,91,-116,91,91,91,91,91,91,91,]),'DO':([51,58,83,84,85,89,90,91,92,93,105,109,131,132,133,150,162,164,191,192,193,195,196,197,198,199,200,202,203,205,206,207,210,211,212,213,219,221,222,223,224,225,226,232,234,235,236,237,238,239,252,253,261,263,293,299,304,308,],[-99,-94,-137,-134,-138,-115,-136,-135,-133,-132,-93,-99,-114,-113,-139,208,-99,-97,-140,-125,-120,-122,-121,-126,-128,-127,-129,-131,-123,-130,-124,-92,-87,-89,-88,-86,-99,-95,-99,-79,-81,-80,-78,-77,-83,-85,-84,-82,-90,-91,-119,-118,-98,-96,-61,-63,309,-62,]),'ARRAY':([36,126,189,275,286,],[80,187,80,80,80,]),'REALCONSTANT':([39,43,45,48,60,80,86,87,88,94,98,99,106,108,116,119,120,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,170,172,187,194,201,220,228,257,260,264,268,283,301,303,],[90,90,-116,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,-116,90,90,90,90,90,90,-116,90,90,90,90,90,90,90,90,90,90,90,-116,90,90,90,90,90,90,90,]),'IMPORT':([4,],[6,]),';':([3,11,12,13,16,18,40,41,43,51,52,57,58,63,71,73,74,76,77,78,79,81,83,84,85,89,90,91,92,93,95,97,105,109,124,125,131,132,133,158,162,164,185,186,190,191,192,193,195,196,197,198,199,200,202,203,205,206,207,209,210,211,212,213,219,221,222,223,224,225,226,230,231,232,234,235,236,237,238,239,240,244,248,251,252,253,259,261,263,267,272,274,278,282,290,291,292,295,296,297,307,310,312,319,],[4,25,-6,-8,30,31,-5,-7,-68,-99,110,-70,-94,-65,-26,-106,-108,-105,-107,-104,127,-102,-137,-134,-138,-115,-136,-135,-133,-132,146,-69,-93,-99,-33,-26,-114,-113,-139,218,-99,-97,247,-33,-103,-140,-125,-120,-122,-121,-126,-128,-127,-129,-131,-123,-130,-124,-92,-67,-87,-89,-88,-86,-99,-95,-99,-79,-81,-80,-78,-66,-71,-77,-83,-85,-84,-82,-90,-91,-64,271,-40,-109,-119,-118,-73,-98,-96,-75,-32,-39,-52,-58,-110,-57,-74,-76,-38,-31,-25,-47,-23,-59,]),'IF':([15,29,50,54,65,104,110,112,121,169,174,181,208,218,227,233,254,255,258,266,276,277,280,309,311,313,314,315,316,317,],[-43,60,-116,-116,-116,60,-45,60,60,-116,-116,-116,-116,-44,60,60,60,60,60,-116,-116,-116,-116,-116,-116,60,60,-116,-116,60,]),'=':([24,51,58,83,84,85,89,90,91,92,93,95,97,102,105,109,117,128,130,131,132,133,149,150,161,162,164,173,179,180,191,192,193,195,196,197,198,199,200,202,203,205,206,207,210,211,212,213,216,219,221,222,223,224,225,226,229,231,232,234,235,236,237,238,239,249,252,253,261,263,281,282,285,293,306,308,],[39,-99,-94,-137,-134,-138,-115,-136,-135,-133,-132,138,138,138,-93,-99,138,138,138,-114,-113,-139,138,138,138,-99,-97,138,138,138,-140,-125,-120,-122,-121,-126,-128,-127,-129,-131,-123,-130,-124,-92,-87,-89,-88,-86,138,-99,-95,-99,-79,-81,-80,-78,138,138,-77,-83,-85,-84,-82,-90,-91,138,-119,-118,-98,-96,138,138,138,138,138,138,]),'ASSIGN':([13,51,57,58,105,109,113,115,162,164,207,210,211,212,213,219,221,222,223,224,225,226,232,234,235,236,237,238,239,261,263,],[27,-99,-72,-94,-93,-99,170,172,-99,-97,-92,-87,-89,-88,-86,-99,-95,-99,-79,-81,-80,-78,-77,-83,-85,-84,-82,-90,-91,-98,-96,]),'$end':([2,42,96,],[0,-2,-1,]),'LESSEQUAL':([51,58,83,84,85,89,90,91,92,93,95,97,102,105,109,117,128,130,131,132,133,149,150,161,162,164,173,179,180,191,192,193,195,196,197,198,199,200,202,203,205,206,207,210,211,212,213,216,219,221,222,223,224,225,226,229,231,232,234,235,236,237,238,239,249,252,253,261,263,281,282,285,293,306,308,],[-99,-94,-137,-134,-138,-115,-136,-135,-133,-132,145,145,145,-93,-99,145,145,145,-114,-113,-139,145,145,145,-99,-97,145,145,145,-140,-125,145,-122,145,-126,-128,-127,-129,-131,-123,-130,-124,-92,-87,-89,-88,-86,145,-99,-95,-99,-79,-81,-80,-78,145,145,-77,-83,-85,-84,-82,-90,-91,145,145,145,-98,-96,145,145,145,145,145,145,]),'REPEAT':([15,29,50,54,65,104,110,112,121,169,174,181,208,218,227,233,254,255,258,266,276,277,280,309,311,313,314,315,316,317,],[-43,54,-116,-116,-116,54,-45,54,54,-116,-116,-116,-116,-44,54,54,54,54,54,-116,-116,-116,-116,-116,-116,54,54,-116,-116,54,]),'END':([4,5,7,8,9,10,14,15,17,20,23,25,29,30,31,35,38,50,65,67,68,104,110,121,127,146,156,174,181,188,204,208,214,215,218,233,247,250,254,255,256,257,258,266,273,276,277,279,280,284,289,294,298,300,305,309,311,313,314,315,316,317,318,320,321,],[-4,-12,-42,-22,-16,-14,28,-43,-9,-12,-12,-3,-46,-22,-22,-11,-10,-116,-116,-21,-20,-41,-45,-46,-17,-14,-56,-116,240,-16,-13,-116,-51,-54,-44,-46,-12,-15,-46,-46,278,-56,-46,-117,-24,291,-50,-53,-55,-116,-42,-49,302,-51,310,-116,-116,-46,-46,-116,-117,319,-116,-49,-48,]),'FOR':([15,29,50,54,65,104,110,112,121,169,174,181,208,218,227,233,254,255,258,266,276,277,280,309,311,313,314,315,316,317,],[-43,55,-116,-116,-116,55,-45,55,55,-116,-116,-116,-116,-44,55,55,55,55,55,-116,-116,-116,-116,-116,-116,55,55,-116,-116,55,]),'READINT':([15,29,50,54,65,104,110,112,121,169,174,181,208,218,227,233,254,255,258,266,276,277,280,309,311,313,314,315,316,317,],[-43,56,-116,-116,-116,56,-45,56,56,-116,-116,-116,-116,-44,56,56,56,56,56,-116,-116,-116,-116,-116,-116,56,56,-116,-116,56,]),'#':([51,58,83,84,85,89,90,91,92,93,95,97,102,105,109,117,128,130,131,132,133,149,150,161,162,164,173,179,180,191,192,193,195,196,197,198,199,200,202,203,205,206,207,210,211,212,213,216,219,221,222,223,224,225,226,229,231,232,234,235,236,237,238,239,249,252,253,261,263,281,282,285,293,306,308,],[-99,-94,-137,-134,-138,-115,-136,-135,-133,-132,135,135,135,-93,-99,135,135,135,-114,-113,-139,135,135,135,-99,-97,135,135,135,-140,-125,-120,-122,-121,-126,-128,-127,-129,-131,-123,-130,-124,-92,-87,-89,-88,-86,135,-99,-95,-99,-79,-81,-80,-78,135,135,-77,-83,-85,-84,-82,-90,-91,135,-119,-118,-98,-96,135,135,135,135,135,135,]),'MODULE':([0,],[1,]),'ELSE':([110,156,174,214,215,218,233,257,258,266,279,280,284,294,300,311,314,316,318,320,321,],[-45,-56,-116,255,-54,-44,-46,-56,-46,-117,-53,-55,-116,-49,255,-116,-46,-117,-116,-49,-48,]),'>':([51,58,83,84,85,89,90,91,92,93,95,97,102,105,109,117,128,130,131,132,133,149,150,161,162,164,173,179,180,191,192,193,195,196,197,198,199,200,202,203,205,206,207,210,211,212,213,216,219,221,222,223,224,225,226,229,231,232,234,235,236,237,238,239,249,252,253,261,263,281,282,285,293,306,308,],[-99,-94,-137,-134,-138,-115,-136,-135,-133,-132,148,148,148,-93,-99,148,148,148,-114,-113,-139,148,148,148,-99,-97,148,148,148,-140,-125,148,-122,148,-126,-128,-127,-129,-131,-123,-130,-124,-92,-87,-89,-88,-86,148,-99,-95,-99,-79,-81,-80,-78,148,148,-77,-83,-85,-84,-82,-90,-91,148,148,148,-98,-96,148,148,148,148,148,148,]),'CHR':([15,29,39,43,45,48,50,54,60,65,80,86,87,88,94,98,99,100,103,104,106,108,110,112,114,116,119,120,121,122,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,169,170,172,174,181,187,194,201,208,218,220,227,228,233,254,255,257,258,260,264,266,268,276,277,280,283,301,303,309,311,313,314,315,316,317,],[-43,62,62,62,-116,62,-116,-116,62,-116,62,62,62,62,62,62,62,62,62,62,62,62,-45,62,62,62,62,62,62,62,62,62,-116,62,62,62,62,62,62,-116,62,62,62,62,62,-116,62,62,-116,-116,62,62,62,-116,-44,62,62,-116,62,62,62,62,62,62,62,-116,62,-116,-116,-116,62,62,62,-116,-116,62,62,-116,-116,62,]),'ABS':([15,29,39,43,45,48,50,54,60,65,80,86,87,88,94,98,99,100,103,104,106,108,110,112,114,116,119,120,121,122,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,169,170,172,174,181,187,194,201,208,218,220,227,228,233,254,255,257,258,260,264,266,268,276,277,280,283,301,303,309,311,313,314,315,316,317,],[-43,59,59,59,-116,59,-116,-116,59,-116,59,59,59,59,59,59,59,59,59,59,59,59,-45,59,59,59,59,59,59,59,59,59,-116,59,59,59,59,59,59,-116,59,59,59,59,59,-116,59,59,-116,-116,59,59,59,-116,-44,59,59,-116,59,59,59,59,59,59,59,-116,59,-116,-116,-116,59,59,59,-116,-116,59,59,-116,-116,59,]),'ELSIF':([110,174,218,233,266,284,294,311,314,316,318,320,],[-45,-116,-44,-46,-117,-116,301,-116,-46,-117,-116,301,]),'INTEGER':([36,101,111,118,189,275,286,288,],[78,155,168,178,78,78,78,78,]),'VAR':([4,5,9,10,20,23,25,32,127,146,184,188,204,247,250,271,],[-4,9,-16,-14,9,9,-3,70,-17,-14,70,-16,-13,9,-15,70,]),'[':([51,109,162,219,222,],[108,108,108,108,108,]),']':([51,58,83,84,85,89,90,91,92,93,105,108,109,131,132,133,160,161,162,163,164,191,192,193,195,196,197,198,199,200,202,203,205,206,207,210,211,212,213,219,221,222,223,224,225,226,232,234,235,236,237,238,239,252,253,261,262,263,],[-99,-94,-137,-134,-138,-115,-136,-135,-133,-132,-93,-101,-99,-114,-113,-139,-100,-112,-99,222,-97,-140,-125,-120,-122,-121,-126,-128,-127,-129,-131,-123,-130,-124,-92,-87,-89,-88,-86,-99,-95,-99,-79,-81,-80,-78,-77,-83,-85,-84,-82,-90,-91,-119,-118,-98,-111,-96,]),'ID':([1,6,9,10,15,19,26,27,28,29,32,33,34,36,37,39,43,45,48,50,54,55,60,65,69,70,72,80,86,87,88,94,98,99,100,103,104,106,107,108,110,112,114,116,119,120,121,122,127,129,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,156,169,170,172,174,181,183,184,187,188,189,194,201,208,218,220,227,228,233,243,254,255,257,258,260,264,266,268,269,271,275,276,277,280,283,286,288,301,302,303,309,311,313,314,315,316,317,],[3,13,22,24,-43,-28,13,41,42,51,-30,71,-28,81,22,51,51,-116,51,-116,-116,113,51,-116,123,-29,125,51,51,51,51,51,51,51,51,51,51,51,162,51,-45,51,51,51,51,51,51,51,-17,190,51,51,-116,51,51,51,51,51,51,-116,51,51,24,51,51,51,-116,51,51,-116,-116,242,-30,51,22,81,51,51,-116,-44,51,51,-116,51,22,51,51,51,51,51,51,-116,51,-27,-30,81,-116,-116,-116,51,81,81,51,307,51,-116,-116,51,51,-116,-116,51,]),'PROCEDURE':([4,5,8,9,10,20,23,25,30,31,35,38,127,146,188,204,247,250,],[-4,-12,19,-16,-14,-12,-12,-3,19,19,-11,-10,-17,-14,-16,-13,-12,-15,]),'SIZE':([15,29,39,43,45,48,50,54,60,65,80,86,87,88,94,98,99,100,103,104,106,108,110,112,114,116,119,120,121,122,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,169,170,172,174,181,187,194,201,208,218,220,227,228,233,254,255,257,258,260,264,266,268,276,277,280,283,301,303,309,311,313,314,315,316,317,],[-43,53,53,53,-116,53,-116,-116,53,-116,53,53,53,53,53,53,53,53,53,53,53,53,-45,53,53,53,53,53,53,53,53,53,-116,53,53,53,53,53,53,-116,53,53,53,53,53,-116,53,53,-116,-116,53,53,53,-116,-44,53,53,-116,53,53,53,53,53,53,53,-116,53,-116,-116,-116,53,53,53,-116,-116,53,53,-116,-116,53,]),':':([21,22,51,58,82,83,84,85,89,90,91,92,93,105,109,123,131,132,133,162,164,191,192,193,195,196,197,198,199,200,202,203,205,206,207,210,211,212,213,216,219,221,222,223,224,225,226,232,234,235,236,237,238,239,252,253,261,263,270,272,],[36,-18,-99,-94,-19,-137,-134,-138,-115,-136,-135,-133,-132,-93,-99,183,-114,-113,-139,-99,-97,-140,-125,-120,-122,-121,-126,-128,-127,-129,-131,-123,-130,-124,-92,-87,-89,-88,-86,258,-99,-95,-99,-79,-81,-80,-78,-77,-83,-85,-84,-82,-90,-91,-119,-118,-98,-96,286,288,]),'UNTIL':([54,110,112,169,218,],[-116,-45,-46,228,-44,]),'NIL':([39,43,45,48,60,80,86,87,88,94,98,99,106,108,116,119,120,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,170,172,187,194,201,220,228,257,260,264,268,283,301,303,],[93,93,-116,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,-116,93,93,93,93,93,93,-116,93,93,93,93,93,93,93,93,93,93,93,-116,93,93,93,93,93,93,93,]),'MAX':([15,29,39,43,45,48,50,54,60,65,80,86,87,88,94,98,99,100,103,104,106,108,110,112,114,116,119,120,121,122,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,169,170,172,174,181,187,194,201,208,218,220,227,228,233,254,255,257,258,260,264,266,268,276,277,280,283,301,303,309,311,313,314,315,316,317,],[-43,47,47,47,-116,47,-116,-116,47,-116,47,47,47,47,47,47,47,47,47,47,47,47,-45,47,47,47,47,47,47,47,47,47,-116,47,47,47,47,47,47,-116,47,47,47,47,47,-116,47,47,-116,-116,47,47,47,-116,-44,47,47,-116,47,47,47,47,47,47,47,-116,47,-116,-116,-116,47,47,47,-116,-116,47,47,-116,-116,47,]),'^':([19,51,109,162,219,222,],[34,109,109,109,109,109,]),'<':([51,58,83,84,85,89,90,91,92,93,95,97,102,105,109,117,128,130,131,132,133,149,150,161,162,164,173,179,180,191,192,193,195,196,197,198,199,200,202,203,205,206,207,210,211,212,213,216,219,221,222,223,224,225,226,229,231,232,234,235,236,237,238,239,249,252,253,261,263,281,282,285,293,306,308,],[-99,-94,-137,-134,-138,-115,-136,-135,-133,-132,137,137,137,-93,-99,137,137,137,-114,-113,-139,137,137,137,-99,-97,137,137,137,-140,-125,137,-122,137,-126,-128,-127,-129,-131,-123,-130,-124,-92,-87,-89,-88,-86,137,-99,-95,-99,-79,-81,-80,-78,137,137,-77,-83,-85,-84,-82,-90,-91,137,137,137,-98,-96,137,137,137,137,137,137,]),'BOOLEAN':([36,101,111,118,189,275,286,288,],[77,154,167,177,77,77,77,77,]),'EXIT':([15,29,50,54,65,104,110,112,121,169,174,181,208,218,227,233,254,255,258,266,276,277,280,309,311,313,314,315,316,317,],[-43,63,-116,-116,-116,63,-45,63,63,-116,-116,-116,-116,-44,63,63,63,63,63,-116,-116,-116,-116,-116,-116,63,63,-116,-116,63,]),'OF':([51,58,83,84,85,89,90,91,92,93,102,105,109,128,131,132,133,162,164,191,192,193,195,196,197,198,199,200,202,203,205,206,207,210,211,212,213,219,221,222,223,224,225,226,232,234,235,236,237,238,239,249,252,253,261,263,],[-99,-94,-137,-134,-138,-115,-136,-135,-133,-132,156,-93,-99,189,-114,-113,-139,-99,-97,-140,-125,-120,-122,-121,-126,-128,-127,-129,-131,-123,-130,-124,-92,-87,-89,-88,-86,-99,-95,-99,-79,-81,-80,-78,-77,-83,-85,-84,-82,-90,-91,275,-119,-118,-98,-96,]),'ORD':([15,29,39,43,45,48,50,54,60,65,80,86,87,88,94,98,99,100,103,104,106,108,110,112,114,116,119,120,121,122,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,169,170,172,174,181,187,194,201,208,218,220,227,228,233,254,255,257,258,260,264,266,268,276,277,280,283,301,303,309,311,313,314,315,316,317,],[-43,64,64,64,-116,64,-116,-116,64,-116,64,64,64,64,64,64,64,64,64,64,64,64,-45,64,64,64,64,64,64,64,64,64,-116,64,64,64,64,64,64,-116,64,64,64,64,64,-116,64,64,-116,-116,64,64,64,-116,-44,64,64,-116,64,64,64,64,64,64,64,-116,64,-116,-116,-116,64,64,64,-116,-116,64,64,-116,-116,64,]),'~':([39,43,45,48,60,80,86,87,88,94,98,99,106,108,116,119,120,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,170,172,187,194,201,220,228,257,260,264,268,283,301,303,],[94,94,-116,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,-116,94,94,94,94,94,94,-116,94,94,94,94,94,94,94,94,94,94,94,-116,94,94,94,94,94,94,94,]),'POINTER':([36,189,275,286,],[75,75,75,75,]),'OR':([51,58,83,84,85,89,90,91,92,93,95,97,102,105,109,117,128,130,131,132,133,149,150,161,162,164,173,179,180,191,192,193,195,196,197,198,199,200,202,203,205,206,207,210,211,212,213,216,219,221,222,223,224,225,226,229,231,232,234,235,236,237,238,239,249,252,253,261,263,281,282,285,293,306,308,],[-99,-94,-137,-134,-138,-115,-136,-135,-133,-132,143,143,143,-93,-99,143,143,143,-114,-113,-139,143,143,143,-99,-97,143,143,143,-140,-125,143,-122,143,-126,-128,-127,-129,-131,-123,-130,-124,-92,-87,-89,-88,-86,143,-99,-95,-99,-79,-81,-80,-78,143,143,-77,-83,-85,-84,-82,-90,-91,143,-119,-118,-98,-96,143,143,143,143,143,143,]),'LOOP':([15,29,50,54,65,104,110,112,121,169,174,181,208,218,227,233,254,255,258,266,276,277,280,309,311,313,314,315,316,317,],[-43,65,-116,-116,-116,65,-45,65,65,-116,-116,-116,-116,-44,65,65,65,65,65,-116,-116,-116,-116,-116,-116,65,65,-116,-116,65,]),'INC':([15,29,50,54,65,104,110,112,121,169,174,181,208,218,227,233,254,255,258,266,276,277,280,309,311,313,314,315,316,317,],[-43,66,-116,-116,-116,66,-45,66,66,-116,-116,-116,-116,-44,66,66,66,66,66,-116,-116,-116,-116,-116,-116,66,66,-116,-116,66,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statementBlock':([7,289,],[14,298,]),'forAssign':([229,],[265,]),'suffix':([51,109,162,219,222,],[105,164,221,261,263,]),'forwardDeclaration':([8,30,31,],[16,16,16,]),'module':([0,],[2,]),'constantDeclarationList':([10,146,],[23,204,]),'case':([156,257,],[215,215,]),'identifierDeclarationList':([5,20,23,247,],[8,35,38,8,]),'beginquad':([15,],[29,]),'optionalExpressionList':([106,108,],[159,163,]),'optionalElse':([214,300,],[256,305,]),'receiver':([19,34,],[33,72,]),'popTable2':([248,],[274,]),'optionalVAR':([32,184,271,],[69,243,243,]),'toValue':([293,],[299,]),'nMarker':([266,316,],[284,318,]),'importList':([4,],[5,]),'formalParameter':([184,271,],[244,244,]),'statementList':([29,112,121,233,254,255,258,313,314,],[50,169,181,266,276,277,280,315,316,]),'procedureDeclarationList':([8,30,31,],[17,67,68,]),'expressionList':([106,108,220,],[160,160,262,]),'procedureDeclaration':([8,30,31,],[18,18,18,]),'statement':([29,104,112,121,227,233,254,255,258,313,314,317,],[52,158,52,52,158,52,52,52,52,52,52,158,]),'factor':([39,43,48,60,80,86,87,88,94,98,99,106,108,116,119,120,134,135,137,138,139,140,141,142,144,145,147,148,156,170,172,187,194,201,220,257,260,264,268,283,301,303,],[89,89,89,89,89,89,89,89,133,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'checkConstant':([57,157,182,],[115,217,241,]),'type':([36,189,275,286,],[79,251,290,296,]),'importedModules':([6,26,],[12,12,]),'clearVariables':([127,],[188,]),'variableDeclarationList':([9,188,],[20,250,]),'caseList':([156,257,],[214,279,]),'declarationList':([5,247,],[7,273,]),'designator':([29,39,43,48,60,80,86,87,88,94,98,99,100,103,104,106,108,112,114,116,119,120,121,122,134,135,137,138,139,140,141,142,144,145,147,148,156,170,172,187,194,201,220,227,233,254,255,257,258,260,264,268,283,301,303,313,314,317,],[57,92,92,92,92,92,92,92,92,92,92,92,151,157,57,92,92,57,171,92,92,92,57,182,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,57,57,57,57,92,57,92,92,92,92,92,92,57,57,57,]),'builtIn':([29,39,43,48,60,80,86,87,88,94,98,99,100,103,104,106,108,112,114,116,119,120,121,122,134,135,137,138,139,140,141,142,144,145,147,148,156,170,172,187,194,201,220,227,233,254,255,257,258,260,264,268,283,301,303,313,314,317,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'boolMarker':([45,50,54,65,136,143,169,174,181,208,228,266,276,277,280,284,309,311,315,316,318,],[99,104,112,121,194,201,227,233,227,254,264,227,227,227,227,294,313,314,317,227,320,]),'importedModulesList':([6,26,],[11,40,]),'qualident':([36,189,275,286,288,],[74,74,74,74,297,]),'elsifList':([294,320,],[300,321,]),'optionalFormalParameterList':([184,],[246,]),'createTable':([71,125,],[124,186,]),'identifierList':([9,37,188,243,],[21,82,21,270,]),'formalParameterList':([184,271,],[245,287,]),'insertEntry':([273,],[289,]),'popTable':([307,],[312,]),'expression':([39,43,48,60,80,86,87,88,98,99,106,108,116,119,120,134,135,137,138,139,140,141,142,144,145,147,148,156,170,172,187,194,201,220,257,260,264,268,283,301,303,],[95,97,102,117,128,130,131,132,149,150,161,161,173,179,180,192,193,195,196,197,198,199,200,202,203,205,206,216,229,231,249,252,253,161,216,281,282,285,293,306,308,]),'optionalFormalParameters':([124,186,],[185,248,]),'optionalBY':([299,],[304,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> MODULE ID ; importList declarationList statementBlock END ID .','module',9,'p_module','phase.py',535),
  ('module -> MODULE ID ; importList declarationList statementBlock END ID','module',8,'p_module2','phase.py',544),
  ('importList -> IMPORT importedModulesList ;','importList',3,'p_importList','phase.py',557),
  ('importList -> <empty>','importList',0,'p_importList','phase.py',558),
  ('importedModulesList -> importedModules , importedModulesList','importedModulesList',3,'p_importedModulesList','phase.py',565),
  ('importedModulesList -> importedModules','importedModulesList',1,'p_importedModulesList','phase.py',566),
  ('importedModules -> ID ASSIGN ID','importedModules',3,'p_importedModules','phase.py',569),
  ('importedModules -> ID','importedModules',1,'p_importedModules','phase.py',570),
  ('declarationList -> identifierDeclarationList procedureDeclarationList','declarationList',2,'p_declarationList','phase.py',596),
  ('identifierDeclarationList -> CONST constantDeclarationList identifierDeclarationList','identifierDeclarationList',3,'p_identifierDeclarationList','phase.py',599),
  ('identifierDeclarationList -> VAR variableDeclarationList identifierDeclarationList','identifierDeclarationList',3,'p_identifierDeclarationList','phase.py',600),
  ('identifierDeclarationList -> <empty>','identifierDeclarationList',0,'p_identifierDeclarationList','phase.py',601),
  ('constantDeclarationList -> ID = expression ; constantDeclarationList','constantDeclarationList',5,'p_constantDeclarationList','phase.py',606),
  ('constantDeclarationList -> <empty>','constantDeclarationList',0,'p_constantDeclarationList','phase.py',607),
  ('variableDeclarationList -> identifierList : type ; clearVariables variableDeclarationList','variableDeclarationList',6,'p_variableDeclarationList','phase.py',632),
  ('variableDeclarationList -> <empty>','variableDeclarationList',0,'p_variableDeclarationList','phase.py',633),
  ('clearVariables -> <empty>','clearVariables',0,'p_clearVariables','phase.py',642),
  ('identifierList -> ID','identifierList',1,'p_identifierList','phase.py',750),
  ('identifierList -> ID , identifierList','identifierList',3,'p_identifierList','phase.py',751),
  ('procedureDeclarationList -> procedureDeclaration ; procedureDeclarationList','procedureDeclarationList',3,'p_procedureDeclarationList','phase.py',772),
  ('procedureDeclarationList -> forwardDeclaration ; procedureDeclarationList','procedureDeclarationList',3,'p_procedureDeclarationList','phase.py',773),
  ('procedureDeclarationList -> <empty>','procedureDeclarationList',0,'p_procedureDeclarationList','phase.py',774),
  ('procedureDeclaration -> PROCEDURE receiver ID createTable optionalFormalParameters ; declarationList insertEntry statementBlock END ID popTable','procedureDeclaration',12,'p_procedureDeclaration','phase.py',777),
  ('insertEntry -> <empty>','insertEntry',0,'p_insertEntry','phase.py',785),
  ('popTable -> <empty>','popTable',0,'p_popTable','phase.py',843),
  ('createTable -> <empty>','createTable',0,'p_createTable','phase.py',863),
  ('receiver -> ( optionalVAR ID : ID )','receiver',6,'p_receiver','phase.py',885),
  ('receiver -> <empty>','receiver',0,'p_receiver','phase.py',886),
  ('optionalVAR -> VAR','optionalVAR',1,'p_optionalVAR','phase.py',892),
  ('optionalVAR -> <empty>','optionalVAR',0,'p_optionalVAR','phase.py',893),
  ('optionalFormalParameters -> ( optionalFormalParameterList ) : qualident','optionalFormalParameters',5,'p_optionalFormalParameters','phase.py',901),
  ('optionalFormalParameters -> ( optionalFormalParameterList )','optionalFormalParameters',3,'p_optionalFormalParameters','phase.py',902),
  ('optionalFormalParameters -> <empty>','optionalFormalParameters',0,'p_optionalFormalParameters','phase.py',903),
  ('optionalFormalParameterList -> formalParameterList','optionalFormalParameterList',1,'p_optionalFormalParameterList','phase.py',922),
  ('optionalFormalParameterList -> <empty>','optionalFormalParameterList',0,'p_optionalFormalParameterList','phase.py',923),
  ('formalParameterList -> formalParameter ; formalParameterList','formalParameterList',3,'p_formalParameterList','phase.py',931),
  ('formalParameterList -> formalParameter','formalParameterList',1,'p_formalParameterList','phase.py',932),
  ('formalParameter -> optionalVAR identifierList : type','formalParameter',4,'p_formalParameter','phase.py',942),
  ('forwardDeclaration -> PROCEDURE ^ receiver ID createTable optionalFormalParameters popTable2','forwardDeclaration',7,'p_forwardDeclaration','phase.py',983),
  ('popTable2 -> <empty>','popTable2',0,'p_popTable2','phase.py',986),
  ('statementBlock -> BEGIN beginquad statementList boolMarker','statementBlock',4,'p_statementBlock','phase.py',1046),
  ('statementBlock -> <empty>','statementBlock',0,'p_statementBlock','phase.py',1047),
  ('beginquad -> <empty>','beginquad',0,'p_beginquad','phase.py',1058),
  ('statementList -> statementList boolMarker statement ;','statementList',4,'p_statementList','phase.py',1068),
  ('statementList -> statement ;','statementList',2,'p_statementList','phase.py',1069),
  ('statementList -> <empty>','statementList',0,'p_statementList','phase.py',1070),
  ('statement -> IF expression THEN boolMarker statementList nMarker boolMarker elsifList optionalElse END','statement',10,'p_statement_if','phase.py',1089),
  ('elsifList -> ELSIF expression THEN boolMarker statementList nMarker boolMarker elsifList','elsifList',8,'p_elsifList','phase.py',1105),
  ('elsifList -> <empty>','elsifList',0,'p_elsifList','phase.py',1106),
  ('optionalElse -> ELSE statementList','optionalElse',2,'p_optionalElse','phase.py',1125),
  ('optionalElse -> <empty>','optionalElse',0,'p_optionalElse','phase.py',1126),
  ('statement -> CASE expression OF caseList optionalElse END','statement',6,'p_statement_case','phase.py',1140),
  ('caseList -> case | caseList','caseList',3,'p_caseList_recur','phase.py',1169),
  ('caseList -> case','caseList',1,'p_caseList','phase.py',1182),
  ('case -> expression : statementList','case',3,'p_case','phase.py',1190),
  ('case -> <empty>','case',0,'p_case_empty','phase.py',1198),
  ('statement -> WHILE boolMarker expression DO boolMarker statementList END','statement',7,'p_statement_while','phase.py',1254),
  ('statement -> REPEAT boolMarker statementList UNTIL boolMarker expression','statement',6,'p_statement_repeat','phase.py',1274),
  ('statement -> FOR ID ASSIGN expression forAssign TO expression toValue optionalBY DO boolMarker statementList boolMarker END','statement',14,'p_statement_for','phase.py',1286),
  ('forAssign -> <empty>','forAssign',0,'p_forAssign','phase.py',1347),
  ('toValue -> <empty>','toValue',0,'p_toValue','phase.py',1357),
  ('optionalBY -> BY expression','optionalBY',2,'p_optionalBY','phase.py',1365),
  ('optionalBY -> <empty>','optionalBY',0,'p_optionalBY','phase.py',1366),
  ('statement -> LOOP boolMarker statementList END','statement',4,'p_statement_loop','phase.py',1385),
  ('statement -> EXIT','statement',1,'p_statement_exit','phase.py',1394),
  ('statement -> READINT ( designator )','statement',4,'p_statement_read_int','phase.py',1401),
  ('statement -> READREAL ( designator )','statement',4,'p_statement_read_real','phase.py',1427),
  ('statement -> RETURN','statement',1,'p_statement_return','phase.py',1454),
  ('statement -> RETURN expression','statement',2,'p_statement_return_expression','phase.py',1461),
  ('statement -> designator','statement',1,'p_statement','phase.py',1468),
  ('statement -> designator checkConstant ASSIGN expression','statement',4,'p_statement_assign','phase.py',1490),
  ('checkConstant -> <empty>','checkConstant',0,'p_checkConstant','phase.py',1589),
  ('statement -> DEC ( designator checkConstant )','statement',5,'p_statement_DEC','phase.py',1611),
  ('statement -> DEC ( designator checkConstant , expression )','statement',7,'p_statement_DEC','phase.py',1612),
  ('statement -> INC ( designator checkConstant )','statement',5,'p_statement_INC','phase.py',1717),
  ('statement -> INC ( designator checkConstant , expression )','statement',7,'p_statement_INC','phase.py',1718),
  ('builtIn -> ABS ( expression )','builtIn',4,'p_builtIn_ABS','phase.py',1823),
  ('builtIn -> SIZE ( INTEGER )','builtIn',4,'p_builtIn_SIZE','phase.py',1873),
  ('builtIn -> SIZE ( REAL )','builtIn',4,'p_builtIn_SIZE','phase.py',1874),
  ('builtIn -> SIZE ( BOOLEAN )','builtIn',4,'p_builtIn_SIZE','phase.py',1875),
  ('builtIn -> SIZE ( CHAR )','builtIn',4,'p_builtIn_SIZE','phase.py',1876),
  ('builtIn -> MIN ( INTEGER )','builtIn',4,'p_builtIn_MIN','phase.py',1912),
  ('builtIn -> MIN ( REAL )','builtIn',4,'p_builtIn_MIN','phase.py',1913),
  ('builtIn -> MIN ( BOOLEAN )','builtIn',4,'p_builtIn_MIN','phase.py',1914),
  ('builtIn -> MIN ( CHAR )','builtIn',4,'p_builtIn_MIN','phase.py',1915),
  ('builtIn -> MAX ( INTEGER )','builtIn',4,'p_builtIn_MAX','phase.py',1953),
  ('builtIn -> MAX ( REAL )','builtIn',4,'p_builtIn_MAX','phase.py',1954),
  ('builtIn -> MAX ( BOOLEAN )','builtIn',4,'p_builtIn_MAX','phase.py',1955),
  ('builtIn -> MAX ( CHAR )','builtIn',4,'p_builtIn_MAX','phase.py',1956),
  ('builtIn -> CHR ( expression )','builtIn',4,'p_builtIn_CHR','phase.py',1994),
  ('builtIn -> ORD ( expression )','builtIn',4,'p_builtIn_ORD','phase.py',2012),
  ('builtIn -> CAP ( expression )','builtIn',4,'p_builtIn_CAP','phase.py',2037),
  ('designator -> ID suffix','designator',2,'p_designator','phase.py',2075),
  ('designator -> builtIn','designator',1,'p_designator','phase.py',2076),
  ('suffix -> . ID suffix','suffix',3,'p_suffix','phase.py',2218),
  ('suffix -> [ optionalExpressionList ] suffix','suffix',4,'p_suffix','phase.py',2219),
  ('suffix -> ^ suffix','suffix',2,'p_suffix','phase.py',2220),
  ('suffix -> ( optionalExpressionList ) suffix','suffix',4,'p_suffix','phase.py',2221),
  ('suffix -> <empty>','suffix',0,'p_suffix','phase.py',2222),
  ('optionalExpressionList -> expressionList','optionalExpressionList',1,'p_optionalExpressionList','phase.py',2482),
  ('optionalExpressionList -> <empty>','optionalExpressionList',0,'p_optionalExpressionList','phase.py',2483),
  ('qualident -> ID','qualident',1,'p_qualident','phase.py',2502),
  ('qualident -> ID . ID','qualident',3,'p_qualident','phase.py',2503),
  ('qualident -> INTEGER','qualident',1,'p_qualident','phase.py',2504),
  ('qualident -> CHAR','qualident',1,'p_qualident','phase.py',2505),
  ('qualident -> REAL','qualident',1,'p_qualident','phase.py',2506),
  ('qualident -> BOOLEAN','qualident',1,'p_qualident','phase.py',2507),
  ('type -> qualident','type',1,'p_type','phase.py',2517),
  ('type -> ARRAY expression OF type','type',4,'p_type_array','phase.py',2532),
  ('type -> POINTER TO ARRAY expression OF type','type',6,'p_type_pointer','phase.py',2553),
  ('expressionList -> expression , expressionList','expressionList',3,'p_expressionList','phase.py',2563),
  ('expressionList -> expression','expressionList',1,'p_expressionList','phase.py',2564),
  ('expression -> - expression','expression',2,'p_expression_u','phase.py',2583),
  ('expression -> + expression','expression',2,'p_expression_u','phase.py',2584),
  ('expression -> factor','expression',1,'p_expression_factor_conversion','phase.py',2648),
  ('boolMarker -> <empty>','boolMarker',0,'p_boolMarker','phase.py',2692),
  ('nMarker -> <empty>','nMarker',0,'p_nMarker','phase.py',2697),
  ('expression -> expression OR boolMarker expression','expression',4,'p_expression_bool','phase.py',2704),
  ('expression -> expression & boolMarker expression','expression',4,'p_expression_bool','phase.py',2705),
  ('expression -> expression # expression','expression',3,'p_expression_relational','phase.py',2815),
  ('expression -> expression = expression','expression',3,'p_expression_relational','phase.py',2816),
  ('expression -> expression < expression','expression',3,'p_expression_relational','phase.py',2817),
  ('expression -> expression LESSEQUAL expression','expression',3,'p_expression_relational','phase.py',2818),
  ('expression -> expression > expression','expression',3,'p_expression_relational','phase.py',2819),
  ('expression -> expression MOREEQUAL expression','expression',3,'p_expression_relational','phase.py',2820),
  ('expression -> expression + expression','expression',3,'p_expression','phase.py',3089),
  ('expression -> expression - expression','expression',3,'p_expression','phase.py',3090),
  ('expression -> expression * expression','expression',3,'p_expression','phase.py',3091),
  ('expression -> expression / expression','expression',3,'p_expression','phase.py',3092),
  ('expression -> expression DIV expression','expression',3,'p_expression','phase.py',3093),
  ('expression -> expression MOD expression','expression',3,'p_expression','phase.py',3094),
  ('factor -> NIL','factor',1,'p_factor','phase.py',3341),
  ('factor -> designator','factor',1,'p_factor_designator','phase.py',3344),
  ('factor -> INTEGERCONSTANT','factor',1,'p_factor_integer','phase.py',3379),
  ('factor -> CHARACTERCONSTANT','factor',1,'p_factor_character','phase.py',3391),
  ('factor -> REALCONSTANT','factor',1,'p_factor_real','phase.py',3403),
  ('factor -> STRINGCONSTANT','factor',1,'p_factor_string','phase.py',3417),
  ('factor -> BOOLEANCONSTANT','factor',1,'p_factor_boolean','phase.py',3431),
  ('factor -> ~ factor','factor',2,'p_factor_neg','phase.py',3459),
  ('factor -> ( expression )','factor',3,'p_bracket_expr','phase.py',3518),
]
